# Generated by Django 5.2.5 on 2025-08-24 15:44

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('storefronts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=200, verbose_name='name')),
                ('slug', models.SlugField(blank=True, default='', max_length=200, verbose_name='slug')),
                ('description', models.TextField(default='', verbose_name='description')),
                ('short_description', models.TextField(blank=True, default='', max_length=500, verbose_name='short description')),
                ('featured_image', models.CharField(blank=True, default='', max_length=200, verbose_name='featured image')),
                ('gallery_images', models.JSONField(blank=True, default=list, verbose_name='gallery images')),
                ('pricing_type', models.CharField(choices=[('free', 'Free'), ('fixed', 'Fixed Price'), ('flexible', 'Pay What You Want'), ('subscription', 'Subscription')], default='fixed', max_length=20, verbose_name='pricing type')),
                ('price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='price')),
                ('currency', models.CharField(default='ZAR', max_length=3, verbose_name='currency')),
                ('minimum_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='minimum price')),
                ('vat_inclusive', models.BooleanField(default=True, verbose_name='VAT inclusive')),
                ('vat_rate', models.DecimalField(decimal_places=4, default=Decimal('0.15'), max_digits=5, verbose_name='VAT rate')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Review'), ('published', 'Published'), ('suspended', 'Suspended'), ('archived', 'Archived')], default='draft', max_length=20, verbose_name='status')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('is_digital', models.BooleanField(default=True, verbose_name='is digital')),
                ('is_marketplace_promoted', models.BooleanField(default=False, verbose_name='marketplace promoted')),
                ('marketplace_promotion_start', models.DateTimeField(blank=True, null=True, verbose_name='promotion start')),
                ('marketplace_promotion_end', models.DateTimeField(blank=True, null=True, verbose_name='promotion end')),
                ('commission_rate', models.DecimalField(decimal_places=4, default=Decimal('0.30'), max_digits=5, verbose_name='commission rate')),
                ('trending_score', models.FloatField(default=0.0, verbose_name='trending score')),
                ('discovery_rank', models.PositiveIntegerField(default=0, verbose_name='discovery rank')),
                ('last_24h_sales', models.PositiveIntegerField(default=0, verbose_name='last 24h sales')),
                ('last_24h_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='last 24h revenue')),
                ('meta_title', models.CharField(blank=True, default='', max_length=60, verbose_name='meta title')),
                ('meta_description', models.TextField(blank=True, default='', max_length=160, verbose_name='meta description')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='view count')),
                ('purchase_count', models.PositiveIntegerField(default=0, verbose_name='purchase count')),
                ('rating_average', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, verbose_name='rating average')),
                ('rating_count', models.PositiveIntegerField(default=0, verbose_name='rating count')),
                ('ai_tags', models.JSONField(blank=True, default=list, verbose_name='AI generated tags')),
                ('recommendation_score', models.FloatField(default=0.0, verbose_name='recommendation score')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='published at')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=50, unique=True, verbose_name='name')),
                ('slug', models.SlugField(default='', unique=True, verbose_name='slug')),
                ('color', models.CharField(default='#3B82F6', max_length=7, verbose_name='color')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='usage count')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=100, verbose_name='name')),
                ('slug', models.SlugField(default='', unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('image', models.CharField(blank=True, default='', max_length=200, verbose_name='category image')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='sort order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='products.product')),
                ('community_type', models.CharField(choices=[('discord', 'Discord Server'), ('forum', 'Forum'), ('chat', 'Chat Group'), ('hybrid', 'Hybrid Community')], default='discord', max_length=20, verbose_name='community type')),
                ('max_members', models.PositiveIntegerField(blank=True, null=True, verbose_name='max members')),
                ('moderation_level', models.CharField(default='standard', max_length=20, verbose_name='moderation level')),
                ('discord_server_id', models.CharField(blank=True, default='', max_length=100, verbose_name='Discord server ID')),
                ('discord_invite_link', models.URLField(blank=True, verbose_name='Discord invite link')),
                ('forum_url', models.URLField(blank=True, verbose_name='forum URL')),
                ('voice_channels', models.BooleanField(default=True, verbose_name='voice channels')),
                ('file_sharing', models.BooleanField(default=True, verbose_name='file sharing')),
                ('events_calendar', models.BooleanField(default=True, verbose_name='events calendar')),
            ],
            options={
                'verbose_name': 'Community',
                'verbose_name_plural': 'Communities',
            },
            bases=('products.product',),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='products.product')),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('all_levels', 'All Levels')], default='beginner', max_length=20, verbose_name='course level')),
                ('duration_hours', models.PositiveIntegerField(default=1, verbose_name='duration (hours)')),
                ('content_delivery', models.CharField(choices=[('immediate', 'Immediate Access'), ('drip', 'Drip Content'), ('scheduled', 'Scheduled Release')], default='immediate', max_length=20, verbose_name='content delivery')),
                ('drip_schedule_days', models.PositiveIntegerField(default=7, verbose_name='drip schedule (days)')),
                ('certificate_enabled', models.BooleanField(default=False, verbose_name='certificate enabled')),
                ('certificate_template', models.CharField(blank=True, default='', max_length=200, verbose_name='certificate template')),
                ('total_lessons', models.PositiveIntegerField(default=0, verbose_name='total lessons')),
                ('total_videos', models.PositiveIntegerField(default=0, verbose_name='total videos')),
                ('total_pdfs', models.PositiveIntegerField(default=0, verbose_name='total PDFs')),
                ('discussion_enabled', models.BooleanField(default=True, verbose_name='discussion enabled')),
                ('assignments_enabled', models.BooleanField(default=False, verbose_name='assignments enabled')),
                ('quiz_enabled', models.BooleanField(default=False, verbose_name='quiz enabled')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
            },
            bases=('products.product',),
        ),
        migrations.CreateModel(
            name='DigitalDownload',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='products.product')),
                ('download_files', models.JSONField(default=list, verbose_name='download files')),
                ('delivery_method', models.CharField(choices=[('instant', 'Instant Download'), ('email', 'Email Delivery'), ('account', 'Account Access')], default='instant', max_length=20, verbose_name='delivery method')),
                ('download_limit', models.PositiveIntegerField(blank=True, null=True, verbose_name='download limit')),
                ('expiry_days', models.PositiveIntegerField(blank=True, null=True, verbose_name='expiry days')),
                ('secure_delivery', models.BooleanField(default=True, verbose_name='secure delivery')),
                ('watermark_enabled', models.BooleanField(default=False, verbose_name='watermark enabled')),
                ('drm_protection', models.BooleanField(default=False, verbose_name='DRM protection')),
                ('license_type', models.CharField(default='Standard License', max_length=100, verbose_name='license type')),
                ('license_terms', models.TextField(blank=True, default='', verbose_name='license terms')),
            ],
            options={
                'verbose_name': 'Digital Download',
                'verbose_name_plural': 'Digital Downloads',
            },
            bases=('products.product',),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='products.product')),
                ('event_type', models.CharField(choices=[('physical', 'Physical Event'), ('virtual', 'Virtual Event'), ('hybrid', 'Hybrid Event')], default='physical', max_length=20, verbose_name='event type')),
                ('start_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='start date and time')),
                ('end_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='end date and time')),
                ('timezone', models.CharField(default='Africa/Johannesburg', max_length=50, verbose_name='timezone')),
                ('venue_name', models.CharField(blank=True, default='', max_length=200, verbose_name='venue name')),
                ('address', models.TextField(blank=True, default='', verbose_name='address')),
                ('virtual_link', models.URLField(blank=True, verbose_name='virtual event link')),
                ('ticket_type', models.CharField(choices=[('standard', 'Standard Ticket'), ('vip', 'VIP Ticket'), ('early_bird', 'Early Bird'), ('group', 'Group Ticket')], default='standard', max_length=20, verbose_name='ticket type')),
                ('max_attendees', models.PositiveIntegerField(blank=True, null=True, verbose_name='max attendees')),
                ('tickets_sold', models.PositiveIntegerField(default=0, verbose_name='tickets sold')),
                ('qr_enabled', models.BooleanField(default=True, verbose_name='QR code enabled')),
                ('qr_template', models.CharField(blank=True, default='', max_length=200, verbose_name='QR template')),
                ('networking_enabled', models.BooleanField(default=False, verbose_name='networking enabled')),
                ('recording_available', models.BooleanField(default=False, verbose_name='recording available')),
                ('materials_included', models.BooleanField(default=False, verbose_name='materials included')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['start_datetime'],
            },
            bases=('products.product',),
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='products.product')),
                ('billing_cycle', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually'), ('lifetime', 'Lifetime')], default='monthly', max_length=20, verbose_name='billing cycle')),
                ('access_level', models.CharField(choices=[('basic', 'Basic'), ('premium', 'Premium'), ('vip', 'VIP')], default='basic', max_length=20, verbose_name='access level')),
                ('trial_days', models.PositiveIntegerField(default=0, verbose_name='trial days')),
                ('benefits', models.JSONField(default=list, verbose_name='membership benefits')),
                ('max_downloads_per_month', models.PositiveIntegerField(blank=True, null=True, verbose_name='max downloads per month')),
                ('exclusive_content', models.BooleanField(default=False, verbose_name='exclusive content access')),
                ('discord_role_id', models.CharField(blank=True, default='', max_length=100, verbose_name='Discord role ID')),
                ('community_access', models.BooleanField(default=True, verbose_name='community access')),
            ],
            options={
                'verbose_name': 'Membership',
                'verbose_name_plural': 'Memberships',
            },
            bases=('products.product',),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='products.category'),
        ),
        migrations.AddField(
            model_name='product',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='product',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='product',
            name='storefront',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='storefronts.storefront'),
        ),
        migrations.CreateModel(
            name='ProductAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(verbose_name='date')),
                ('views', models.PositiveIntegerField(default=0, verbose_name='views')),
                ('unique_views', models.PositiveIntegerField(default=0, verbose_name='unique views')),
                ('purchases', models.PositiveIntegerField(default=0, verbose_name='purchases')),
                ('revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='revenue')),
                ('organic_traffic', models.PositiveIntegerField(default=0, verbose_name='organic traffic')),
                ('social_traffic', models.PositiveIntegerField(default=0, verbose_name='social traffic')),
                ('direct_traffic', models.PositiveIntegerField(default=0, verbose_name='direct traffic')),
                ('referral_traffic', models.PositiveIntegerField(default=0, verbose_name='referral traffic')),
                ('bounce_rate', models.FloatField(default=0.0, verbose_name='bounce rate')),
                ('time_on_page', models.PositiveIntegerField(default=0, verbose_name='time on page (seconds)')),
                ('conversion_rate', models.FloatField(default=0.0, verbose_name='conversion rate')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Analytics',
                'verbose_name_plural': 'Product Analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='rating')),
                ('title', models.CharField(blank=True, default='', max_length=200, verbose_name='review title')),
                ('content', models.TextField(blank=True, default='', verbose_name='review content')),
                ('is_verified_purchase', models.BooleanField(default=False, verbose_name='verified purchase')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='products', to='products.tag'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='products_ca_slug_da4386_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['is_active', 'sort_order'], name='products_ca_is_acti_5dffbf_idx'),
        ),
        migrations.AddIndex(
            model_name='productanalytics',
            index=models.Index(fields=['product', 'date'], name='products_pr_product_6fbad8_idx'),
        ),
        migrations.AddIndex(
            model_name='productanalytics',
            index=models.Index(fields=['date'], name='products_pr_date_3658f6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productanalytics',
            unique_together={('product', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='productreview',
            unique_together={('product', 'user')},
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['creator', 'status'], name='products_pr_creator_facd78_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='products_pr_categor_9edb3d_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status'], name='products_pr_status_041708_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_featured'], name='products_pr_is_feat_a5d7cd_idx'),
        ),
    ]
