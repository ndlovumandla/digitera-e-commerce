# Generated by Django 5.2.5 on 2025-08-18 09:49

import accounts.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Required. Enter a valid email address.', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='last name')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number with country code, e.g., +27 82 123 4567', max_length=20, null=True, verbose_name='phone number')),
                ('address', models.TextField(blank=True, verbose_name='address')),
                ('vat_registered', models.BooleanField(default=False, help_text='Is this user/business registered for VAT in South Africa?', verbose_name='VAT registered')),
                ('vat_number', models.CharField(blank=True, help_text='South African VAT registration number', max_length=20, null=True, verbose_name='VAT number')),
                ('company_name', models.CharField(blank=True, help_text='Registered company name (if applicable)', max_length=200, null=True, verbose_name='company name')),
                ('role', models.CharField(choices=[('creator', 'Creator'), ('buyer', 'Buyer'), ('admin', 'Admin'), ('moderator', 'Moderator')], default='buyer', max_length=20, verbose_name='user role')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user has verified their email address.', verbose_name='email verified')),
                ('email_verification_token', models.CharField(blank=True, max_length=100, null=True, verbose_name='email verification token')),
                ('two_factor_enabled', models.BooleanField(default=False, verbose_name='two-factor authentication enabled')),
                ('backup_tokens', models.JSONField(blank=True, default=list, help_text='Emergency backup codes for 2FA recovery', verbose_name='backup tokens')),
                ('marketing_emails', models.BooleanField(default=True, verbose_name='receive marketing emails')),
                ('data_processing_consent', models.BooleanField(default=False, help_text='Consent for data processing under POPIA compliance', verbose_name='data processing consent')),
                ('terms_accepted', models.BooleanField(default=False, verbose_name='terms accepted')),
                ('terms_accepted_date', models.DateTimeField(blank=True, null=True, verbose_name='terms accepted date')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='last login IP')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='failed login attempts')),
                ('account_locked_until', models.DateTimeField(blank=True, null=True, verbose_name='account locked until')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='last activity')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', accounts.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='APILog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(max_length=255, verbose_name='API endpoint')),
                ('request_method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('PATCH', 'PATCH'), ('DELETE', 'DELETE'), ('OPTIONS', 'OPTIONS'), ('HEAD', 'HEAD')], max_length=10, verbose_name='request method')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP address')),
                ('user_agent', models.TextField(blank=True, verbose_name='user agent')),
                ('request_data', models.JSONField(blank=True, default=dict, verbose_name='request data')),
                ('status_code', models.IntegerField(verbose_name='HTTP status code')),
                ('response_time', models.FloatField(blank=True, null=True, verbose_name='response time (ms)')),
                ('response_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='response size (bytes)')),
                ('error_message', models.TextField(blank=True, verbose_name='error message')),
                ('stack_trace', models.TextField(blank=True, verbose_name='stack trace')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='api_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'API Log',
                'verbose_name_plural': 'API Logs',
                'db_table': 'api_logs',
            },
        ),
        migrations.CreateModel(
            name='CreatorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_name', models.CharField(help_text='Your unique store name', max_length=100, unique=True, verbose_name='store name')),
                ('store_slug', models.SlugField(help_text='URL-friendly version of your store name', max_length=100, unique=True, verbose_name='store URL slug')),
                ('store_description', models.TextField(blank=True, help_text='Describe what you offer to customers', max_length=1000, verbose_name='store description')),
                ('store_logo', models.ImageField(blank=True, help_text='Square logo for your store (recommended 400x400px)', null=True, upload_to='store_logos/', verbose_name='store logo')),
                ('store_banner', models.ImageField(blank=True, help_text='Banner image for your store (recommended 1200x300px)', null=True, upload_to='store_banners/', verbose_name='store banner')),
                ('primary_color', models.CharField(default='#3B82F6', help_text='Main brand color (hex code)', max_length=7, verbose_name='primary color')),
                ('secondary_color', models.CharField(default='#10B981', help_text='Secondary brand color (hex code)', max_length=7, verbose_name='secondary color')),
                ('custom_css', models.TextField(blank=True, help_text='Advanced: Custom CSS for your storefront', verbose_name='custom CSS')),
                ('custom_domain', models.CharField(blank=True, help_text='Your custom domain (e.g., shop.yourdomain.com)', max_length=100, null=True, verbose_name='custom domain')),
                ('domain_verified', models.BooleanField(default=False, verbose_name='domain verified')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('active', 'Active'), ('suspended', 'Suspended'), ('banned', 'Banned')], default='pending', max_length=20, verbose_name='status')),
                ('verified', models.BooleanField(default=False, help_text='Verified by Digitera team', verbose_name='verified creator')),
                ('featured', models.BooleanField(default=False, verbose_name='featured creator')),
                ('business_category', models.CharField(blank=True, choices=[('art_design', 'Art & Design'), ('business', 'Business'), ('education', 'Education'), ('fitness_health', 'Fitness & Health'), ('food_cooking', 'Food & Cooking'), ('gaming', 'Gaming'), ('lifestyle', 'Lifestyle'), ('music', 'Music'), ('photography', 'Photography'), ('technology', 'Technology'), ('travel', 'Travel'), ('writing', 'Writing'), ('other', 'Other')], max_length=50, verbose_name='business category')),
                ('years_in_business', models.PositiveIntegerField(blank=True, null=True, verbose_name='years in business')),
                ('business_license', models.FileField(blank=True, null=True, upload_to='business_licenses/', verbose_name='business license')),
                ('current_marketing_package', models.CharField(blank=True, choices=[('starter', 'Starter - R499/month'), ('growth', 'Growth - R999/month'), ('pro', 'Pro - R2499/month')], max_length=20, null=True, verbose_name='current marketing package')),
                ('package_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='package expires at')),
                ('total_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='total sales')),
                ('total_products', models.PositiveIntegerField(default=0, verbose_name='total products')),
                ('total_customers', models.PositiveIntegerField(default=0, verbose_name='total customers')),
                ('rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, verbose_name='average rating')),
                ('review_count', models.PositiveIntegerField(default=0, verbose_name='review count')),
                ('bank_name', models.CharField(blank=True, choices=[('absa', 'ABSA Bank'), ('capitec', 'Capitec Bank'), ('fnb', 'First National Bank'), ('nedbank', 'Nedbank'), ('standard_bank', 'Standard Bank'), ('african_bank', 'African Bank'), ('investec', 'Investec'), ('discovery_bank', 'Discovery Bank'), ('other', 'Other')], max_length=100, verbose_name='bank name')),
                ('account_holder', models.CharField(blank=True, max_length=100, verbose_name='account holder name')),
                ('account_number', models.CharField(blank=True, max_length=20, verbose_name='account number')),
                ('branch_code', models.CharField(blank=True, max_length=10, verbose_name='branch code')),
                ('account_type', models.CharField(blank=True, choices=[('current', 'Current Account'), ('savings', 'Savings Account'), ('business', 'Business Account')], max_length=20, verbose_name='account type')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='creator_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Creator Profile',
                'verbose_name_plural': 'Creator Profiles',
                'db_table': 'creator_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, help_text='Profile picture (max 5MB)', null=True, upload_to='avatars/', verbose_name='avatar')),
                ('bio', models.TextField(blank=True, help_text='Tell us about yourself', max_length=500, verbose_name='bio')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20, verbose_name='gender')),
                ('street_address', models.CharField(blank=True, max_length=255, verbose_name='street address')),
                ('suburb', models.CharField(blank=True, max_length=100, verbose_name='suburb')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='city')),
                ('province', models.CharField(blank=True, choices=[('EC', 'Eastern Cape'), ('FS', 'Free State'), ('GP', 'Gauteng'), ('KZN', 'KwaZulu-Natal'), ('LP', 'Limpopo'), ('MP', 'Mpumalanga'), ('NC', 'Northern Cape'), ('NW', 'North West'), ('WC', 'Western Cape')], max_length=3, verbose_name='province')),
                ('postal_code', models.CharField(blank=True, max_length=10, verbose_name='postal code')),
                ('country', models.CharField(default='South Africa', max_length=50, verbose_name='country')),
                ('business_registration_number', models.CharField(blank=True, help_text='CIPC registration number', max_length=20, verbose_name='business registration number')),
                ('tax_number', models.CharField(blank=True, help_text='SARS tax reference number', max_length=20, verbose_name='tax number')),
                ('bee_certificate', models.FileField(blank=True, help_text='B-BBEE certificate for preferential procurement', null=True, upload_to='bee_certificates/', verbose_name='BEE certificate')),
                ('language', models.CharField(choices=[('en', 'English'), ('af', 'Afrikaans'), ('zu', 'Zulu'), ('xh', 'Xhosa'), ('st', 'Sotho'), ('tn', 'Tswana'), ('ss', 'Swati'), ('ve', 'Venda'), ('ts', 'Tsonga'), ('nr', 'Ndebele'), ('nso', 'Northern Sotho')], default='en', max_length=10, verbose_name='preferred language')),
                ('timezone', models.CharField(default='Africa/Johannesburg', max_length=50, verbose_name='timezone')),
                ('currency', models.CharField(default='ZAR', max_length=3, verbose_name='preferred currency')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                ('twitter', models.CharField(blank=True, max_length=50, verbose_name='Twitter username')),
                ('instagram', models.CharField(blank=True, max_length=50, verbose_name='Instagram username')),
                ('linkedin', models.URLField(blank=True, verbose_name='LinkedIn profile')),
                ('facebook', models.URLField(blank=True, verbose_name='Facebook profile')),
                ('youtube', models.URLField(blank=True, verbose_name='YouTube channel')),
                ('tiktok', models.CharField(blank=True, max_length=50, verbose_name='TikTok username')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='email notifications')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='SMS notifications')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='push notifications')),
                ('marketing_sms', models.BooleanField(default=False, verbose_name='marketing SMS')),
                ('total_spent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='total spent')),
                ('total_earned', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='total earned')),
                ('referral_count', models.PositiveIntegerField(default=0, verbose_name='referral count')),
                ('identity_verified', models.BooleanField(default=False, verbose_name='identity verified')),
                ('bank_account_verified', models.BooleanField(default=False, verbose_name='bank account verified')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=255, unique=True, verbose_name='session ID')),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('mobile', 'Mobile'), ('tablet', 'Tablet'), ('unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='device type')),
                ('user_agent', models.TextField(blank=True, verbose_name='user agent')),
                ('browser', models.CharField(blank=True, max_length=50, verbose_name='browser')),
                ('operating_system', models.CharField(blank=True, max_length=50, verbose_name='operating system')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP address')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='location')),
                ('country', models.CharField(blank=True, max_length=50, verbose_name='country')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='city')),
                ('actions', models.JSONField(default=dict, help_text='JSON data containing user actions during the session', verbose_name='user actions')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='started at')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='last activity')),
                ('ended_at', models.DateTimeField(blank=True, null=True, verbose_name='ended at')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'user_sessions',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_role_0ace22_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='users_is_veri_63cd6e_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['vat_registered'], name='users_vat_reg_1541f2_idx'),
        ),
        migrations.AddIndex(
            model_name='apilog',
            index=models.Index(fields=['user', 'timestamp'], name='api_logs_user_id_2a15a5_idx'),
        ),
        migrations.AddIndex(
            model_name='apilog',
            index=models.Index(fields=['endpoint'], name='api_logs_endpoin_96f32f_idx'),
        ),
        migrations.AddIndex(
            model_name='apilog',
            index=models.Index(fields=['status_code'], name='api_logs_status__d9d4ce_idx'),
        ),
        migrations.AddIndex(
            model_name='apilog',
            index=models.Index(fields=['timestamp'], name='api_logs_timesta_a73708_idx'),
        ),
        migrations.AddIndex(
            model_name='apilog',
            index=models.Index(fields=['request_method'], name='api_logs_request_19edff_idx'),
        ),
        migrations.AddIndex(
            model_name='creatorprofile',
            index=models.Index(fields=['store_slug'], name='creator_pro_store_s_33d73f_idx'),
        ),
        migrations.AddIndex(
            model_name='creatorprofile',
            index=models.Index(fields=['status'], name='creator_pro_status_b0dd2f_idx'),
        ),
        migrations.AddIndex(
            model_name='creatorprofile',
            index=models.Index(fields=['verified'], name='creator_pro_verifie_8e490d_idx'),
        ),
        migrations.AddIndex(
            model_name='creatorprofile',
            index=models.Index(fields=['business_category'], name='creator_pro_busines_65a17d_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'started_at'], name='user_sessio_user_id_30ad4b_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_id'], name='user_sessio_session_e62ba3_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['device_type'], name='user_sessio_device__92b1c0_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['is_active'], name='user_sessio_is_acti_1b3cb1_idx'),
        ),
    ]
