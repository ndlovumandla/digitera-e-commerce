# Generated by Django 5.2.5 on 2025-08-24 15:44

import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_number', models.CharField(blank=True, max_length=20, unique=True, verbose_name='order number')),
                ('guest_email', models.EmailField(blank=True, default='', max_length=254, verbose_name='guest email')),
                ('billing_name', models.CharField(default='', max_length=200, verbose_name='billing name')),
                ('billing_email', models.EmailField(default='', max_length=254, verbose_name='billing email')),
                ('billing_phone', models.CharField(blank=True, default='', max_length=20, verbose_name='billing phone')),
                ('billing_address', models.JSONField(default=dict, verbose_name='billing address')),
                ('transaction_type', models.CharField(choices=[('direct', 'Direct Sale (5% fee)'), ('marketplace', 'Marketplace Sale (30% fee)')], default='direct', max_length=20, verbose_name='transaction type')),
                ('currency', models.CharField(default='ZAR', max_length=3, verbose_name='currency')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='total amount')),
                ('platform_fee_rate', models.DecimalField(decimal_places=4, default=Decimal('0.05'), max_digits=5, verbose_name='platform fee rate')),
                ('platform_fee_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='platform fee amount')),
                ('processor_fee_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='processor fee amount')),
                ('vat_rate', models.DecimalField(decimal_places=4, default=Decimal('0.15'), max_digits=5, verbose_name='VAT rate')),
                ('vat_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='VAT amount')),
                ('vat_number', models.CharField(blank=True, default='', max_length=20, verbose_name='VAT number')),
                ('is_vat_registered', models.BooleanField(default=False, verbose_name='is VAT registered')),
                ('original_currency', models.CharField(blank=True, default='', max_length=3, verbose_name='original currency')),
                ('original_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='original amount')),
                ('exchange_rate', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True, verbose_name='exchange rate')),
                ('status', models.CharField(choices=[('pending', 'Pending Payment'), ('processing', 'Processing'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('failed', 'Failed'), ('disputed', 'Disputed')], default='pending', max_length=20, verbose_name='order status')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('authorized', 'Authorized'), ('captured', 'Captured'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='pending', max_length=20, verbose_name='payment status')),
                ('payment_method', models.CharField(blank=True, default='', max_length=50, verbose_name='payment method')),
                ('payment_reference', models.CharField(blank=True, default='', max_length=100, verbose_name='payment reference')),
                ('payment_gateway', models.CharField(blank=True, default='', max_length=50, verbose_name='payment gateway')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('paid_at', models.DateTimeField(blank=True, null=True, verbose_name='paid at')),
                ('shipped_at', models.DateTimeField(blank=True, null=True, verbose_name='shipped at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('notes', models.TextField(blank=True, default='', verbose_name='notes')),
                ('metadata', models.JSONField(default=dict, verbose_name='metadata')),
                ('buyer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(blank=True, default='', max_length=50, unique=True, verbose_name='invoice number')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='due date')),
                ('tax_invoice', models.BooleanField(default=True, verbose_name='tax invoice')),
                ('vat_vendor_number', models.CharField(blank=True, default='', max_length=20, verbose_name='VAT vendor number')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='subtotal')),
                ('vat_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='VAT amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='total amount')),
                ('pdf_url', models.CharField(blank=True, default='', max_length=200, verbose_name='PDF URL')),
                ('pdf_generated', models.BooleanField(default=False, verbose_name='PDF generated')),
                ('notes', models.TextField(blank=True, default='', verbose_name='notes')),
                ('generated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='generated at')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='invoice', to='orders.order')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
            },
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dispute_id', models.CharField(blank=True, default='', max_length=50, unique=True, verbose_name='dispute ID')),
                ('dispute_type', models.CharField(choices=[('chargeback', 'Chargeback'), ('refund_request', 'Refund Request'), ('product_issue', 'Product Issue'), ('delivery_issue', 'Delivery Issue'), ('billing_issue', 'Billing Issue')], default='product_issue', max_length=20, verbose_name='dispute type')),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_review', 'In Review'), ('resolved', 'Resolved'), ('escalated', 'Escalated'), ('closed', 'Closed')], default='open', max_length=20, verbose_name='status')),
                ('reason', models.TextField(default='Customer dispute', verbose_name='reason')),
                ('customer_message', models.TextField(blank=True, default='', verbose_name='customer message')),
                ('resolution', models.TextField(blank=True, default='', verbose_name='resolution')),
                ('refund_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='refund amount')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='resolved at')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_disputes', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disputes', to='orders.order')),
            ],
            options={
                'verbose_name': 'Dispute',
                'verbose_name_plural': 'Disputes',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('product_name', models.CharField(default='', max_length=200, verbose_name='product name')),
                ('product_sku', models.CharField(blank=True, default='', max_length=100, verbose_name='product SKU')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='unit price')),
                ('total_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='total price')),
                ('download_links', models.JSONField(default=list, verbose_name='download links')),
                ('license_key', models.CharField(blank=True, default='', max_length=200, verbose_name='license key')),
                ('access_granted', models.BooleanField(default=False, verbose_name='access granted')),
                ('access_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='access expires at')),
                ('is_fulfilled', models.BooleanField(default=False, verbose_name='is fulfilled')),
                ('fulfilled_at', models.DateTimeField(blank=True, null=True, verbose_name='fulfilled at')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created at')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='orders.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='products.product')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
            },
        ),
        migrations.CreateModel(
            name='OrderStatusHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('previous_status', models.CharField(blank=True, default='', max_length=20, verbose_name='previous status')),
                ('new_status', models.CharField(default='', max_length=20, verbose_name='new status')),
                ('reason', models.TextField(blank=True, default='', verbose_name='reason')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created at')),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='orders.order')),
            ],
            options={
                'verbose_name': 'Order Status History',
                'verbose_name_plural': 'Order Status Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RefundRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='refund amount')),
                ('reason', models.TextField(default='', verbose_name='refund reason')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('processed', 'Processed')], default='pending', max_length=20, verbose_name='status')),
                ('processor_reference', models.CharField(blank=True, default='', max_length=100, verbose_name='processor reference')),
                ('requested_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='requested at')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='processed at')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refund_requests', to='orders.order')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_refunds', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Refund Request',
                'verbose_name_plural': 'Refund Requests',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subscription_id', models.CharField(blank=True, max_length=50, unique=True, verbose_name='subscription ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('past_due', 'Past Due')], default='active', max_length=20, verbose_name='status')),
                ('billing_interval', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], default='monthly', max_length=20, verbose_name='billing interval')),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='amount')),
                ('currency', models.CharField(default='ZAR', max_length=3, verbose_name='currency')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='start date')),
                ('current_period_start', models.DateTimeField(default=django.utils.timezone.now, verbose_name='current period start')),
                ('current_period_end', models.DateTimeField(default=django.utils.timezone.now, verbose_name='current period end')),
                ('next_bill_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='next billing date')),
                ('trial_end', models.DateTimeField(blank=True, null=True, verbose_name='trial end')),
                ('cancelled_at', models.DateTimeField(blank=True, null=True, verbose_name='cancelled at')),
                ('failed_payment_attempts', models.PositiveIntegerField(default=0, verbose_name='failed payment attempts')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subscriptions', to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
            },
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['buyer', 'status'], name='orders_orde_buyer_i_4389c9_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['order_number'], name='orders_orde_order_n_f3ada5_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status', 'payment_status'], name='orders_orde_status_c50fb7_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['transaction_type'], name='orders_orde_transac_efd231_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='orders_orde_created_0e92de_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['guest_email'], name='orders_orde_guest_e_5522f9_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_number'], name='orders_invo_invoice_4a2c44_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['generated_at'], name='orders_invo_generat_6f7055_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['order'], name='orders_invo_order_i_e9463d_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['order'], name='orders_disp_order_i_25ca25_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['dispute_id'], name='orders_disp_dispute_2ecc2d_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['status'], name='orders_disp_status_a7bf34_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['assigned_to'], name='orders_disp_assigne_bd62f0_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order'], name='orders_orde_order_i_5d347b_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['product'], name='orders_orde_product_32ff41_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['is_fulfilled'], name='orders_orde_is_fulf_3f158c_idx'),
        ),
        migrations.AddIndex(
            model_name='orderstatushistory',
            index=models.Index(fields=['order', 'created_at'], name='orders_orde_order_i_1de1d7_idx'),
        ),
        migrations.AddIndex(
            model_name='refundrequest',
            index=models.Index(fields=['order'], name='orders_refu_order_i_31de92_idx'),
        ),
        migrations.AddIndex(
            model_name='refundrequest',
            index=models.Index(fields=['status'], name='orders_refu_status_c996f8_idx'),
        ),
        migrations.AddIndex(
            model_name='refundrequest',
            index=models.Index(fields=['requested_at'], name='orders_refu_request_ae1748_idx'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['user', 'status'], name='orders_subs_user_id_a6b77b_idx'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['subscription_id'], name='orders_subs_subscri_96856e_idx'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['next_bill_date'], name='orders_subs_next_bi_e43e1b_idx'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['status'], name='orders_subs_status_f0c701_idx'),
        ),
    ]
